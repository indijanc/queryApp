type Query {
    "Basic query with the optional filtering"
    telemetry(filter: TelemetryFilter): [Telemetry]
}

"Telemetry type for all vehicles telemetry data"
type Telemetry {
    dateTime: String
    serialNumber: ID
    gpsLongitude: Float
    gpsLatitude: Float
    totalWorkingHours: Float
    groundSpeed: Float
    engineSpeed: Int
    engineLoad: Float
    drumSpeed: Int
    fanSpeed: Int
    strawWalkerSpeed: Int
    separationLosses: Float
    sieveLosses: Float
    chopper: Boolean
    tankLevel: Float
    partialWidthsCount: Int
    frontAttachment: Boolean
    partialWidthsMaxCount: Int
    feedRakeSpeed: Float
    workingPosition: Boolean
    grainTankUnloading: Boolean
    mainDriveStatus: Boolean
    concavePos: Int
    upperSievePos: Int
    lowerSievePos: Int
    grainTank70: Boolean
    grainTank100: Boolean
    grainMoistureContent: Float
    throughput: Float
    radialSpreaderSpeed: String
    grainInReturns: Float
    channelPos: Float
    yieldMeasurement: Boolean
    returnsAugerMeasurement: Float
    moistureMeasurement: Boolean
    typeOfCrop: String
    specificCropWeight: Float
    autoPilotStatus: Boolean
    cruisePilotStatus: String
    rateOfWork: Float
    yield: Float
    quantimeterCalibrationFactor: Float
    separationSensitivity: Float
    sieveSensitivity: Float
    fuelConsumption: Float
    coolantTemperature: Float
    groundSpeedRadar: String
    speedFrontPto: Float
    speedRearPto: Float
    currentGearShift: Int
    ambientTemperature: Float
    parkingBreakStatus: Int
    transverseDifferentialLockStatus: Int
    allWheelDriveStatus: String
    actualStatusOfCreeper: String
}

"Filter for the Telemetry type"
input TelemetryFilter {
    dateTimeFilter: DateTimeFilter
    serialNumberFilter: StringFilter
    gpsLongitudeFilter: FloatFilter
    gpsLatitudeFilter: FloatFilter
    totalWorkingHoursFilter: FloatFilter
    groundSpeedFilter: FloatFilter
    engineSpeedFilter: IntFilter
    engineLoadFilter: FloatFilter
    drumSpeedFilter: IntFilter
    fanSpeedFilter: IntFilter
    strawWalkerSpeedFilter: IntFilter
    separationLossesFilter: FloatFilter
    sieveLossesFilter: FloatFilter
    chopperFilter: BooleanFilter
    tankLevelFilter: FloatFilter
    partialWidthsCountFilter: IntFilter
    frontAttachmentFilter: BooleanFilter
    partialWidthsMaxCountFilter: IntFilter
    feedRakeSpeedFilter: FloatFilter
    workingPositionFilter: BooleanFilter
    grainTankUnloadingFilter: BooleanFilter
    mainDriveStatusFilter: BooleanFilter
    concavePosFilter: IntFilter
    upperSievePosFilter: IntFilter
    lowerSievePosFilter: IntFilter
    grainTank70Filter: BooleanFilter
    grainTank100Filter: BooleanFilter
    grainMoistureContentFilter: FloatFilter
    throughputFilter: FloatFilter
    radialSpreaderSpeedFilter: StringFilter
    grainInReturnsFilter: FloatFilter
    channelPosFilter: FloatFilter
    yieldMeasurementFilter: BooleanFilter
    returnsAugerMeasurementFilter: FloatFilter
    moistureMeasurementFilter: BooleanFilter
    typeOfCropFilter: StringFilter
    specificCropWeightFilter: FloatFilter
    autoPilotStatusFilter: BooleanFilter
    cruisePilotStatusFilter: StringFilter
    rateOfWorkFilter: FloatFilter
    yieldFilter: FloatFilter
    quantimeterCalibrationFactorFilter: FloatFilter
    separationSensitivityFilter: FloatFilter
    sieveSensitivityFilter: FloatFilter
    fuelConsumptionFilter: FloatFilter
    coolantTemperatureFilter: FloatFilter
    groundSpeedRadarFilter: StringFilter
    speedFrontPtoFilter: FloatFilter
    speedRearPtoFilter: FloatFilter
    currentGearShiftFilter: IntFilter
    ambientTemperatureFilter: FloatFilter
    parkingBreakStatusFilter: IntFilter
    transverseDifferentialLockStatusFilter: IntFilter
    allWheelDriveStatusFilter: StringFilter
    actualStatusOfCreeperFilter: StringFilter
}

"Filter for DateTime fields"
input DateTimeFilter {
    "Greater than or equal"
    gte: String

    "Less than"
    lt: String
}

"Filter for String fields"
input StringFilter {
    "Filter for values that contain the string"
    contains: String

    "Filter for values that are equal to provided string"
    equals: String
}

"Filter for Float fields"
input FloatFilter {
    "Greater than or equal"
    gte: Float

    "Less than"
    lt: Float
}

"Filter for Int fields"
input IntFilter {
    "Greater than or equal"
    gte: Int

    "Less than"
    lt: Int
}

"Filter for Boolean fields"
input BooleanFilter {
    "Filter for values that are equal to the boolean value"
    equals: Boolean
}
